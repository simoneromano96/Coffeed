// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateCoffee {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Coffee {
  id: ID!
  name: String!
  price: Float!
  imageUrl: String!
  details: String
}

type CoffeeConnection {
  pageInfo: PageInfo!
  edges: [CoffeeEdge]!
  aggregate: AggregateCoffee!
}

input CoffeeCreateInput {
  id: ID
  name: String!
  price: Float!
  imageUrl: String!
  details: String
}

type CoffeeEdge {
  node: Coffee!
  cursor: String!
}

enum CoffeeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  imageUrl_ASC
  imageUrl_DESC
  details_ASC
  details_DESC
}

type CoffeePreviousValues {
  id: ID!
  name: String!
  price: Float!
  imageUrl: String!
  details: String
}

type CoffeeSubscriptionPayload {
  mutation: MutationType!
  node: Coffee
  updatedFields: [String!]
  previousValues: CoffeePreviousValues
}

input CoffeeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CoffeeWhereInput
  AND: [CoffeeSubscriptionWhereInput!]
  OR: [CoffeeSubscriptionWhereInput!]
  NOT: [CoffeeSubscriptionWhereInput!]
}

input CoffeeUpdateInput {
  name: String
  price: Float
  imageUrl: String
  details: String
}

input CoffeeUpdateManyMutationInput {
  name: String
  price: Float
  imageUrl: String
  details: String
}

input CoffeeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  details: String
  details_not: String
  details_in: [String!]
  details_not_in: [String!]
  details_lt: String
  details_lte: String
  details_gt: String
  details_gte: String
  details_contains: String
  details_not_contains: String
  details_starts_with: String
  details_not_starts_with: String
  details_ends_with: String
  details_not_ends_with: String
  AND: [CoffeeWhereInput!]
  OR: [CoffeeWhereInput!]
  NOT: [CoffeeWhereInput!]
}

input CoffeeWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Mutation {
  createCoffee(data: CoffeeCreateInput!): Coffee!
  updateCoffee(data: CoffeeUpdateInput!, where: CoffeeWhereUniqueInput!): Coffee
  updateManyCoffees(data: CoffeeUpdateManyMutationInput!, where: CoffeeWhereInput): BatchPayload!
  upsertCoffee(where: CoffeeWhereUniqueInput!, create: CoffeeCreateInput!, update: CoffeeUpdateInput!): Coffee!
  deleteCoffee(where: CoffeeWhereUniqueInput!): Coffee
  deleteManyCoffees(where: CoffeeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  coffee(where: CoffeeWhereUniqueInput!): Coffee
  coffees(where: CoffeeWhereInput, orderBy: CoffeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Coffee]!
  coffeesConnection(where: CoffeeWhereInput, orderBy: CoffeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CoffeeConnection!
  node(id: ID!): Node
}

type Subscription {
  coffee(where: CoffeeSubscriptionWhereInput): CoffeeSubscriptionPayload
}
`